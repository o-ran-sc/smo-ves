#!/bin/bash
#
# Copyright(c) 2021 Xoriant Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Script to setup and run VES Collector demo system environment. Maintainer shrinivas.joshi@xoriant.com (Last Update April 15, 2021)
# This script is tested on fresh install of Ubuntu 20.04 VM running on Oracle Virtualbox where Windows 10 is host OS.
# Virtual Machine requirements are as follows.
# Ubuntu 20.04 LTS VM with 6 GB RAM and 4 Core vCPU, 20 GB HDD, 2 network interfaces (enp0s3 in "Host Only Adaper" and enp0s8 is in "NAT")
# Download and opy this setup script in a separate folder on VM, change directory to that folder, provide execute permission to the 
# setup script by executing command “chmod +x setup_ves_demo.sh” and then run the setup script by executing command “./setup_ves_demo.sh”.
#

#Check Docker and collectd is installed, if not install  dependencies and install necesarry packages

clear 

echo -e "Installing and configuring VES Collector demo setup.. it may take couple of minutes..\n"
echo -e "Note that it is a one time setup activity and this step should not be performed again once setup is completed.\n" 
echo -e "\n"
sleep 3 

# Check available local network interface and select one. 

detect_interface=`ip link | awk -F: '$0 !~ "lo|vir|docker|^[^0-9]"{print $2a}' | awk 'BEGIN { ORS = " " } { print }'`
[ -z "$detect_interface" ] && echo -e "No usable network interface found.. exiting.. \n" && exit

detect_interface=`echo $detect_interface | sed 's/ *$//g'`
[ ! -z "$detect_interface" ] && echo "Interfaces found $detect_interface"

interface=`echo $detect_interface | cut -d " " -f 1`
echo -e "Using interface $interface for VES. \n"

echo -e "\n"

# Install docker 

if ! which docker > /dev/null; then
   echo -e "========= Docker not found, Installing Docker ========= \n"
	sudo apt-get remove -y docker docker-engine docker.io containerd runc
	sudo apt-get update
	sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo apt-key fingerprint 0EBFCD88
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	sudo apt-get update
	sudo apt-get install -y docker-ce docker-ce-cli containerd.io
	sudo apt-get install -y docker-ce=5:19.03.13~3-0~ubuntu-focal docker-ce-cli=5:19.03.13~3-0~ubuntu-focal containerd.io
	sudo docker run hello-world
fi

# Install collectd service.

if ! which collectd > /dev/null; then
   echo -e "========= Collectd not found, Installing and configuring collectd service =========  \n"
   sudo apt-get install -y collectd
fi


kafka_host=127.0.0.1
kafka_port=9092 #use same port number in "run_ves_demo.sh" file.

# Update hosts file for mykafka hostname used by collectd 
sudo bash -c "echo '127.0.0.1 mykafka' >> /etc/hosts" 

# Pull latest influxdb, grafana, kafdrop, ves-agent, ves-collector, ves-kafka images from docker hub.
sudo docker pull shrinivas555/grafana
sudo docker pull shrinivas555/influxdb
sudo docker pull shrinivas555/zookeeper
sudo docker pull shrinivas555/kafdrop
sudo docker pull shrinivas555/ves-collector
sudo docker pull shrinivas555/ves-agent
sudo docker pull shrinivas555/ves-kafka


# Configure Linux VM collectd service to send VM OS events to ves-kafka service.
cat <<EOM > /tmp/collectd.conf
#Configuration generated by VES Demo setup script.
FQDNLookup true
LoadPlugin syslog
<Plugin syslog>
        LogLevel info
</Plugin>
LoadPlugin cpu
#---------
<Plugin cpu>
  ReportByCpu true
  ReportByState true
  ValuesPercentage true
</Plugin>
#--------

LoadPlugin df
LoadPlugin disk
LoadPlugin interface
LoadPlugin load
LoadPlugin memory
LoadPlugin processes
LoadPlugin rrdtool
LoadPlugin swap
LoadPlugin users
<Plugin rrdtool>
        DataDir "/var/lib/collectd/rrd"
</Plugin>
<Plugin df>
        Device "/dev/sda1"
        MountPoint "/"
        FSType "ext4"
</Plugin>


LoadPlugin write_kafka
<Plugin write_kafka>
  Property "metadata.broker.list" "mykafka:$kafka_port"
  <Topic "collectd">
    Format JSON
  </Topic>
</Plugin>
EOM

sudo mv /etc/collectd/collectd.conf /etc/collectd/collectd.conf.moved_original
sudo mv /tmp/collectd.conf /etc/collectd/collectd.conf
sudo systemctl restart collectd


# Write VES Demo startup script.

cat <<"EOM" > ./start_ves_demo.sh
#!/bin/bash
#
# Copyright(c) 2021 Xoriant Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Script to setup and run VES Collector demo system environment. (Last Update March 30, 2021)
# This script is tested on Ubuntu 20.04 VM running on Oracle Virtualbox where Windows 10 is host OS.
# Virtual Machine requirements are as follows.
# Ubuntu 20.04 LTS VM with 6 GB RAM and 4 Core vCPU, 20 GB HDD, 2 network interfaces (enp0s3 in "Host Only Adaper" and enp0s8 is in "NAT")
#
# Script to run VES demo environment. Last update March 30,2021. 

#Port assignment on host system for the micro services running in docker.

# influx port 3330
# grafana port 8880
# kafka port 9092
# kafdrop 9000 
# zookeeper port 2181 2888 3888 8080
# VES port 9999

# Stop all containers if those are running accedently.

./stop_ves_demo.sh

influx_port=3330
grafana_port=8880
kafka_port=9092 #Same port number must be set in "build_ves_project.sh" 
kafdrop_port=9000
zookeeper_port=2181 
vel_ves_port=9999

# Check Docker, collectd and git is installed on the VM

if ! which docker > /dev/null; then
   echo -e "Docker not found, please run setup_ves_demo.sh script to fix the problem. \n"
   exit;
fi

if ! which collectd > /dev/null; then
   echo -e "Collectd not found, please setup_ves_demo.sh script to fix the problem. \n"
   exit;
fi

clear

# Select detected local interface to be used for VES containers.
# ** Note ** this variable gets updated by setup_ves_demo.sh script based on the available interfaces on the machine/VM
# If you want specific interface for the stack, please update here manually after setup_ves_demo.sh script is done.

network_interface=InTeRfAcE

# get local ip address of VM from first interface
local_ip=`/sbin/ip -o -4 addr list $network_interface | awk '{print $4}' | cut -d/ -f1`
echo -e "Binding VES Services to local ip address $local_ip \n "
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin influx DB
echo -e "Starting influxdb container on Local Port Number $influx_port. Please wait..\n"
sudo docker run -d -p $influx_port:8086 -v $PWD/influxdb shrinivas555/influxdb
sleep 5 # Give some time to spin the container and bring service up
echo "Done."
echo""
echo -e "--------------------------------------------------------------------\n"
# Spin Grafana Cotainer
echo -e "Starting Grafana cotainer on Local port number $grafana_port. Please wait..\n"
sudo docker run -d -p $grafana_port:3000 -e "GF_SMTP_ENABLED=true" -e "GF_SMTP_HOST=emailpun.xoriant.com:25" shrinivas555/grafana
sleep 5 # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin zookeeper container
echo -e "Starting zookeeper container on Local port number $zookeeper_port. Please wait..\n"
sudo docker run -d --add-host mykafka:$local_ip --add-host myzoo:$local_ip -p $zookeeper_port:2181 -p 2888:2888 -p 3888:3888 -p 8800:8080 shrinivas555/zookeeper
sleep 5  # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin Kafka container.
echo -e "Starting Kafka container on Local port number $kafka_port. Please wait..\n"
sudo docker run -d --add-host mykafka:$local_ip -e zookeeper_host=$local_ip -e zookeeper_hostname='myzoo' -e zookeeper_port=$zookeeper_port \
       	-e kafka_hostname='mykafka' -e kafka_port=$kafka_port -p $kafka_port:$kafka_port shrinivas555/ves-kafka
sleep 7  # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin Kafdrop UI container (this is optional componant)
echo -e "Starting kafdrop UI container on Local port number $kafdrop_port. please wait..\n"
sudo docker run -d --add-host mykafka:$local_ip -p $kafdrop_port:9000 -e KAFKA_BROKERCONNECT=$local_ip:$kafka_port \
	-e JVM_OPTS="-Xms64M -Xmx128M" shrinivas555/kafdrop:latest
sleep 5  # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin ves-collector container.
echo -e "Starting ves collector container on Local port number $vel_ves_port. Please wait\n"
sudo docker run -d -e ves_influxdb_host=$local_ip -e ves_influxdb_port=$influx_port -e ves_grafana_host=$local_ip -e ves_grafana_port=$grafana_port \
	-e ves_host='localhost' -e ves_port=$vel_ves_port -e ves_grafana_auth='admin:admin' -e ves_user='user' -e ves_pass='password' -e ves_path=''\
       	-e ves_topic='events' -e ves_loglevel='DEBUG' -p $vel_ves_port:$vel_ves_port shrinivas555/ves-collector
sleep 6  # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
# Spin ves agent container.
echo -e "Starting ves agent container. Please wait\n" 
sudo docker run -d -e ves_kafka_host=$local_ip -e ves_kafka_hostname='mykafka' -e ves_host=$local_ip -e ves_port=$vel_ves_port -e ves_path='' \
	-e ves_topic='events' -e ves_https='False' -e ves_user='user' -e ves_pass='password' -e ves_interval='10' -e ves_kafka_port=$kafka_port \
	-e ves_mode='./yaml/host' -e ves_version='5' -e ves_loglevel='DEBUG' shrinivas555/ves-agent
sleep 5  # Give some time to spin the container and bring service up
echo "Done."
echo ""
echo -e "--------------------------------------------------------------------\n"
echo""
echo -e "ves stack summary\n"

echo -e "===================================================================================================================\n"
echo ""
echo -e "Kafka port: $kafka_port \n"
echo -e "Kafdrop port: $kafdrop_port \n"
echo -e "ves collector listner port: $vel_ves_port \n"
echo -e "Grafana port: $grafana_port \n"
echo -e "To access kafdrop UI use http://$local_ip:$kafdrop_port from your web browser. \n"
echo -e "To access grafana dashboard paste url  http://$local_ip:$grafana_port in web browser. "
echo -e "Grafana username/password is admin/admin *** DO NOT CHANGE THE ADMIN PASSWORD, CLICK SKIP OPTION ***\n"
echo -e "Hit ^Search^ ikon after login to Grafana and select VES Demo dashboard.\n" 
echo ""
echo -e "===================================================================================================================\n" 
EOM

#Replace InTeRfAcE with the correct interface detacted.

sed -i "s/InTeRfAcE/$interface/g" "start_ves_demo.sh"

# Write VES Demo Stop script

cat <<"EOM" > ./stop_ves_demo.sh
#!/bin/bash
#
# Copyright(c) 2021 Xoriant Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


echo "Stoping all containers"
sudo docker stop $(sudo docker ps -aq)
echo -e "Done\n"
EOM

chmod +x start_ves_demo.sh
chmod +x stop_ves_demo.sh
echo -e "\n"
echo -e "Setup has been completed. Please run ./start_ves_demo.sh from current directory to start the demo. \n"
echo -e "\n"
